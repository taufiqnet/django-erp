# Generated by Django 5.1.3 on 2025-05-08 12:18

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('business', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(db_index=True, max_length=255, unique=True)),
                ('username', models.CharField(max_length=100, unique=True)),
                ('bio', models.CharField(blank=True, max_length=255, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_type', models.CharField(choices=[('customer', 'Customer'), ('vendor', 'Vendor'), ('admin', 'Admin'), ('staff', 'Staff')], default='customer', max_length=10)),
                ('allowed_business_type', models.CharField(blank=True, choices=[('beauty', 'Beauty'), ('food', 'Food & Beverage'), ('retail', 'Retail')], help_text='Applicable for Vendors. Defines the type of business they manage.', max_length=10, null=True)),
                ('customer_tier', models.CharField(blank=True, choices=[('regular', 'Regular'), ('premium', 'Premium'), ('wholesale', 'Wholesale')], help_text='Applicable for Customers. Defines their subscription type.', max_length=10, null=True)),
                ('business', models.ForeignKey(blank=True, help_text='Business this user belongs to (for vendors/staff)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='staff_profiles', to='business.business')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
                'constraints': [models.CheckConstraint(condition=models.Q(models.Q(models.Q(('business__isnull', False), ('user_type__in', ['vendor', 'staff'])), models.Q(('business__isnull', True), ('user_type', 'customer')), _connector='OR')), name='business_required_for_vendors'), models.CheckConstraint(condition=models.Q(models.Q(models.Q(('allowed_business_type__isnull', False), ('user_type', 'vendor')), ('user_type__in', ['customer', 'staff']), _connector='OR')), name='business_type_required_for_vendors')],
            },
        ),
    ]
